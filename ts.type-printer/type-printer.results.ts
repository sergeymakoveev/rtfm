type CssVarsThemeOptions = {
  cssVarPrefix: string;
  components: Components<Omit<Theme, "palette" | "components"> & CssVarsTheme>;
  colorSchemes: Partial<Record<SupportedColorScheme, ColorSystemOptions>>;
  shouldSkipGeneratingVar: (keys: string[], value: string | number) => boolean;
  zIndex: Partial<ZIndex>;
  shape: Partial<Shape>;
  breakpoints: BreakpointsOptions;
  direction: Direction;
  mixins: MixinsOptions;
  shadows: Shadows;
  spacing: SpacingOptions;
  transitions: TransitionsOptions;
  typography: TypographyOptions | ((palette: Palette) => TypographyOptions);
  unstable_sxConfig: SxConfig;
  unstable_strictMode: boolean;
}

type components = {
  MuiAlert: { defaultProps?: Partial<AlertProps>; styleOverrides?: Partial<OverridesStyleRules<keyof AlertClasses, "MuiAlert", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<AlertProps> | ((props: Partial<AlertProps> & { ownerState: Partial<AlertProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiAlertTitle: { defaultProps?: Partial<AlertTitleProps>; styleOverrides?: Partial<OverridesStyleRules<"root", "MuiAlertTitle", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<AlertTitleProps> | ((props: Partial<AlertTitleProps> & { ownerState: Partial<AlertTitleProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiAppBar: { defaultProps?: Partial<AppBarProps>; styleOverrides?: Partial<OverridesStyleRules<keyof AppBarClasses, "MuiAppBar", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<AppBarProps> | ((props: Partial<AppBarProps> & { ownerState: Partial<AppBarProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiAutocomplete: { defaultProps?: Partial<AutocompleteProps<any, any, any, any, "div">>; styleOverrides?: Partial<OverridesStyleRules<keyof AutocompleteClasses, "MuiAutocomplete", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<AutocompleteProps<any, any, any, any, "div">> | ((props: Partial<AutocompleteProps<any, any, any, any, "div">> & { ownerState: Partial<AutocompleteProps<any, any, any, any, "div">>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiAvatar: { defaultProps?: Partial<AvatarProps>; styleOverrides?: Partial<OverridesStyleRules<keyof AvatarClasses, "MuiAvatar", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<AvatarProps> | ((props: Partial<AvatarProps> & { ownerState: Partial<AvatarProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiAvatarGroup: { defaultProps?: Partial<AvatarGroupProps>; styleOverrides?: Partial<OverridesStyleRules<keyof AvatarGroupClasses, "MuiAvatarGroup", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<AvatarGroupProps> | ((props: Partial<AvatarGroupProps> & { ownerState: Partial<AvatarGroupProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiBackdrop: { defaultProps?: Partial<BackdropProps>; styleOverrides?: Partial<OverridesStyleRules<keyof BackdropClasses, "MuiBackdrop", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<BackdropProps> | ((props: Partial<BackdropProps> & { ownerState: Partial<BackdropProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiBadge: { defaultProps?: Partial<BadgeProps>; styleOverrides?: Partial<OverridesStyleRules<keyof BadgeClasses, "MuiBadge", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<BadgeProps> | ((props: Partial<BadgeProps> & { ownerState: Partial<BadgeProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiBottomNavigation: { defaultProps?: Partial<BottomNavigationProps>; styleOverrides?: Partial<OverridesStyleRules<"root", "MuiBottomNavigation", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<BottomNavigationProps> | ((props: Partial<BottomNavigationProps> & { ownerState: Partial<BottomNavigationProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiBottomNavigationAction: { defaultProps?: Partial<BottomNavigationActionProps>; styleOverrides?: Partial<OverridesStyleRules<keyof BottomNavigationActionClasses, "MuiBottomNavigationAction", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<BottomNavigationActionProps> | ((props: Partial<BottomNavigationActionProps> & { ownerState: Partial<BottomNavigationActionProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiBreadcrumbs: { defaultProps?: Partial<BreadcrumbsProps>; styleOverrides?: Partial<OverridesStyleRules<keyof BreadcrumbsClasses, "MuiBreadcrumbs", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<BreadcrumbsProps> | ((props: Partial<BreadcrumbsProps> & { ownerState: Partial<BreadcrumbsProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiButton: { defaultProps?: Partial<ButtonProps>; styleOverrides?: Partial<OverridesStyleRules<keyof ButtonClasses, "MuiButton", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<ButtonProps> | ((props: Partial<ButtonProps> & { ownerState: Partial<ButtonProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiButtonBase: { defaultProps?: Partial<ButtonBaseProps>; styleOverrides?: Partial<OverridesStyleRules<keyof ButtonBaseClasses, "MuiButtonBase", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<ButtonBaseProps> | ((props: Partial<ButtonBaseProps> & { ownerState: Partial<ButtonBaseProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiButtonGroup: { defaultProps?: Partial<ButtonGroupProps>; styleOverrides?: Partial<OverridesStyleRules<keyof ButtonGroupClasses, "MuiButtonGroup", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<ButtonGroupProps> | ((props: Partial<ButtonGroupProps> & { ownerState: Partial<ButtonGroupProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiCard: { defaultProps?: Partial<CardProps>; styleOverrides?: Partial<OverridesStyleRules<"root", "MuiCard", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<CardProps> | ((props: Partial<CardProps> & { ownerState: Partial<CardProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiCardActionArea: { defaultProps?: Partial<CardActionAreaProps>; styleOverrides?: Partial<OverridesStyleRules<keyof CardActionAreaClasses, "MuiCardActionArea", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<CardActionAreaProps> | ((props: Partial<CardActionAreaProps> & { ownerState: Partial<CardActionAreaProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiCardActions: { defaultProps?: Partial<CardActionsProps>; styleOverrides?: Partial<OverridesStyleRules<keyof CardActionsClasses, "MuiCardActions", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<CardActionsProps> | ((props: Partial<CardActionsProps> & { ownerState: Partial<CardActionsProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiCardContent: { defaultProps?: Partial<CardContentProps>; styleOverrides?: Partial<OverridesStyleRules<"root", "MuiCardContent", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<CardContentProps> | ((props: Partial<CardContentProps> & { ownerState: Partial<CardContentProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiCardHeader: { defaultProps?: Partial<CardHeaderProps>; styleOverrides?: Partial<OverridesStyleRules<keyof CardHeaderClasses, "MuiCardHeader", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<CardHeaderProps> | ((props: Partial<CardHeaderProps> & { ownerState: Partial<CardHeaderProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiCardMedia: { defaultProps?: Partial<CardMediaProps>; styleOverrides?: Partial<OverridesStyleRules<keyof CardMediaClasses, "MuiCardMedia", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<CardMediaProps> | ((props: Partial<CardMediaProps> & { ownerState: Partial<CardMediaProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiCheckbox: { defaultProps?: Partial<CheckboxProps>; styleOverrides?: Partial<OverridesStyleRules<keyof CheckboxClasses, "MuiCheckbox", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<CheckboxProps> | ((props: Partial<CheckboxProps> & { ownerState: Partial<CheckboxProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiChip: { defaultProps?: Partial<ChipProps>; styleOverrides?: Partial<OverridesStyleRules<keyof ChipClasses, "MuiChip", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<ChipProps> | ((props: Partial<ChipProps> & { ownerState: Partial<ChipProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiCircularProgress: { defaultProps?: Partial<CircularProgressProps>; styleOverrides?: Partial<OverridesStyleRules<keyof CircularProgressClasses, "MuiCircularProgress", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<CircularProgressProps> | ((props: Partial<CircularProgressProps> & { ownerState: Partial<CircularProgressProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiCollapse: { defaultProps?: Partial<CollapseProps>; styleOverrides?: Partial<OverridesStyleRules<keyof CollapseClasses, "MuiCollapse", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<CollapseProps> | ((props: Partial<CollapseProps> & { ownerState: Partial<CollapseProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiContainer: { defaultProps?: Partial<ContainerProps>; styleOverrides?: Partial<OverridesStyleRules<keyof ContainerClasses, "MuiContainer", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<ContainerProps> | ((props: Partial<ContainerProps> & { ownerState: Partial<ContainerProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiCssBaseline: { defaultProps?: Partial<CssBaselineProps>; styleOverrides?: string | CSSObject | ((theme: Omit<Theme, "palette" | "components"> & CssVarsTheme) => CSSInterpolation); variants?: { props: Partial<CssBaselineProps> | ((props: Partial<CssBaselineProps> & { ownerState: Partial<CssBaselineProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiDialog: { defaultProps?: Partial<DialogProps>; styleOverrides?: Partial<OverridesStyleRules<keyof DialogClasses, "MuiDialog", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<DialogProps> | ((props: Partial<DialogProps> & { ownerState: Partial<DialogProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiDialogActions: { defaultProps?: Partial<DialogActionsProps>; styleOverrides?: Partial<OverridesStyleRules<keyof DialogActionsClasses, "MuiDialogActions", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<DialogActionsProps> | ((props: Partial<DialogActionsProps> & { ownerState: Partial<DialogActionsProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiDialogContent: { defaultProps?: Partial<DialogContentProps>; styleOverrides?: Partial<OverridesStyleRules<keyof DialogContentClasses, "MuiDialogContent", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<DialogContentProps> | ((props: Partial<DialogContentProps> & { ownerState: Partial<DialogContentProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiDialogContentText: { defaultProps?: Partial<DialogContentTextProps>; styleOverrides?: Partial<OverridesStyleRules<"root", "MuiDialogContentText", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<DialogContentTextProps> | ((props: Partial<DialogContentTextProps> & { ownerState: Partial<DialogContentTextProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiDialogTitle: { defaultProps?: Partial<DialogTitleProps>; styleOverrides?: Partial<OverridesStyleRules<"root", "MuiDialogTitle", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<DialogTitleProps> | ((props: Partial<DialogTitleProps> & { ownerState: Partial<DialogTitleProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiDivider: { defaultProps?: Partial<DividerProps>; styleOverrides?: Partial<OverridesStyleRules<keyof DividerClasses, "MuiDivider", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<DividerProps> | ((props: Partial<DividerProps> & { ownerState: Partial<DividerProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiDrawer: { defaultProps?: Partial<DrawerProps>; styleOverrides?: Partial<OverridesStyleRules<keyof DrawerClasses, "MuiDrawer", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<DrawerProps> | ((props: Partial<DrawerProps> & { ownerState: Partial<DrawerProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiAccordion: { defaultProps?: Partial<AccordionProps>; styleOverrides?: Partial<OverridesStyleRules<keyof AccordionClasses, "MuiAccordion", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<AccordionProps> | ((props: Partial<AccordionProps> & { ownerState: Partial<AccordionProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiAccordionActions: { defaultProps?: Partial<AccordionActionsProps>; styleOverrides?: Partial<OverridesStyleRules<keyof AccordionActionsClasses, "MuiAccordionActions", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<AccordionActionsProps> | ((props: Partial<AccordionActionsProps> & { ownerState: Partial<AccordionActionsProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiAccordionDetails: { defaultProps?: Partial<AccordionDetailsProps>; styleOverrides?: Partial<OverridesStyleRules<"root", "MuiAccordionDetails", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<AccordionDetailsProps> | ((props: Partial<AccordionDetailsProps> & { ownerState: Partial<AccordionDetailsProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiAccordionSummary: { defaultProps?: Partial<AccordionSummaryProps>; styleOverrides?: Partial<OverridesStyleRules<keyof AccordionSummaryClasses, "MuiAccordionSummary", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<AccordionSummaryProps> | ((props: Partial<AccordionSummaryProps> & { ownerState: Partial<AccordionSummaryProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiFab: { defaultProps?: Partial<FabProps>; styleOverrides?: Partial<OverridesStyleRules<keyof FabClasses, "MuiFab", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<FabProps> | ((props: Partial<FabProps> & { ownerState: Partial<FabProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiFilledInput: { defaultProps?: Partial<FilledInputProps>; styleOverrides?: Partial<OverridesStyleRules<keyof FilledInputClasses, "MuiFilledInput", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<FilledInputProps> | ((props: Partial<FilledInputProps> & { ownerState: Partial<FilledInputProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiFormControl: { defaultProps?: Partial<FormControlProps>; styleOverrides?: Partial<OverridesStyleRules<keyof FormControlClasses, "MuiFormControl", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<FormControlProps> | ((props: Partial<FormControlProps> & { ownerState: Partial<FormControlProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiFormControlLabel: { defaultProps?: Partial<FormControlLabelProps>; styleOverrides?: Partial<OverridesStyleRules<keyof FormControlLabelClasses, "MuiFormControlLabel", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<FormControlLabelProps> | ((props: Partial<FormControlLabelProps> & { ownerState: Partial<FormControlLabelProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiFormGroup: { defaultProps?: Partial<FormGroupProps>; styleOverrides?: Partial<OverridesStyleRules<keyof FormGroupClasses, "MuiFormGroup", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<FormGroupProps> | ((props: Partial<FormGroupProps> & { ownerState: Partial<FormGroupProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiFormHelperText: { defaultProps?: Partial<FormHelperTextProps>; styleOverrides?: Partial<OverridesStyleRules<keyof FormHelperTextClasses, "MuiFormHelperText", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<FormHelperTextProps> | ((props: Partial<FormHelperTextProps> & { ownerState: Partial<FormHelperTextProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiFormLabel: { defaultProps?: Partial<FormLabelProps>; styleOverrides?: Partial<OverridesStyleRules<keyof FormLabelClasses, "MuiFormLabel", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<FormLabelProps> | ((props: Partial<FormLabelProps> & { ownerState: Partial<FormLabelProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiGrid: { defaultProps?: Partial<GridProps>; styleOverrides?: Partial<OverridesStyleRules<keyof GridClasses, "MuiGrid", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<GridProps> | ((props: Partial<GridProps> & { ownerState: Partial<GridProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiGrid2: { defaultProps?: Partial<Grid2Props>; styleOverrides?: Partial<OverridesStyleRules<"root", "MuiGrid2", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<Grid2Props> | ((props: Partial<Grid2Props> & { ownerState: Partial<Grid2Props>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiImageList: { defaultProps?: Partial<ImageListProps>; styleOverrides?: Partial<OverridesStyleRules<keyof ImageListClasses, "MuiImageList", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<ImageListProps> | ((props: Partial<ImageListProps> & { ownerState: Partial<ImageListProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiImageListItem: { defaultProps?: Partial<ImageListItemProps>; styleOverrides?: Partial<OverridesStyleRules<keyof ImageListItemClasses, "MuiImageListItem", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<ImageListItemProps> | ((props: Partial<ImageListItemProps> & { ownerState: Partial<ImageListItemProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiImageListItemBar: { defaultProps?: Partial<ImageListItemBarProps>; styleOverrides?: Partial<OverridesStyleRules<keyof ImageListItemBarClasses, "MuiImageListItemBar", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<ImageListItemBarProps> | ((props: Partial<ImageListItemBarProps> & { ownerState: Partial<ImageListItemBarProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiIcon: { defaultProps?: Partial<IconProps>; styleOverrides?: Partial<OverridesStyleRules<keyof IconClasses, "MuiIcon", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<IconProps> | ((props: Partial<IconProps> & { ownerState: Partial<IconProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiIconButton: { defaultProps?: Partial<IconButtonProps>; styleOverrides?: Partial<OverridesStyleRules<keyof IconButtonClasses, "MuiIconButton", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<IconButtonProps> | ((props: Partial<IconButtonProps> & { ownerState: Partial<IconButtonProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiInput: { defaultProps?: Partial<InputProps>; styleOverrides?: Partial<OverridesStyleRules<keyof InputClasses, "MuiInput", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<InputProps> | ((props: Partial<InputProps> & { ownerState: Partial<InputProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiInputAdornment: { defaultProps?: Partial<InputAdornmentProps>; styleOverrides?: Partial<OverridesStyleRules<keyof InputAdornmentClasses, "MuiInputAdornment", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<InputAdornmentProps> | ((props: Partial<InputAdornmentProps> & { ownerState: Partial<InputAdornmentProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiInputBase: { defaultProps?: Partial<InputBaseProps>; styleOverrides?: Partial<OverridesStyleRules<keyof InputBaseClasses, "MuiInputBase", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<InputBaseProps> | ((props: Partial<InputBaseProps> & { ownerState: Partial<InputBaseProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiInputLabel: { defaultProps?: Partial<InputLabelProps>; styleOverrides?: Partial<OverridesStyleRules<keyof InputLabelClasses, "MuiInputLabel", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<InputLabelProps> | ((props: Partial<InputLabelProps> & { ownerState: Partial<InputLabelProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiLinearProgress: { defaultProps?: Partial<LinearProgressProps>; styleOverrides?: Partial<OverridesStyleRules<keyof LinearProgressClasses, "MuiLinearProgress", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<LinearProgressProps> | ((props: Partial<LinearProgressProps> & { ownerState: Partial<LinearProgressProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiLink: { defaultProps?: Partial<LinkProps>; styleOverrides?: Partial<OverridesStyleRules<keyof LinkClasses, "MuiLink", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<LinkProps> | ((props: Partial<LinkProps> & { ownerState: Partial<LinkProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiList: { defaultProps?: Partial<ListProps>; styleOverrides?: Partial<OverridesStyleRules<keyof ListClasses, "MuiList", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<ListProps> | ((props: Partial<ListProps> & { ownerState: Partial<ListProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiListItem: { defaultProps?: Partial<ListItemProps>; styleOverrides?: Partial<OverridesStyleRules<keyof ListItemClasses, "MuiListItem", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<ListItemProps> | ((props: Partial<ListItemProps> & { ownerState: Partial<ListItemProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiListItemButton: { defaultProps?: Partial<ListItemButtonProps>; styleOverrides?: Partial<OverridesStyleRules<keyof ListItemButtonClasses, "MuiListItemButton", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<ListItemButtonProps> | ((props: Partial<ListItemButtonProps> & { ownerState: Partial<ListItemButtonProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiListItemAvatar: { defaultProps?: Partial<ListItemAvatarProps>; styleOverrides?: Partial<OverridesStyleRules<keyof ListItemAvatarClasses, "MuiListItemAvatar", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<ListItemAvatarProps> | ((props: Partial<ListItemAvatarProps> & { ownerState: Partial<ListItemAvatarProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiListItemIcon: { defaultProps?: Partial<ListItemIconProps>; styleOverrides?: Partial<OverridesStyleRules<keyof ListItemIconClasses, "MuiListItemIcon", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<ListItemIconProps> | ((props: Partial<ListItemIconProps> & { ownerState: Partial<ListItemIconProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiListItemSecondaryAction: { defaultProps?: Partial<ListItemSecondaryActionProps>; styleOverrides?: Partial<OverridesStyleRules<keyof ListItemSecondaryActionClasses, "MuiListItemSecondaryAction", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<ListItemSecondaryActionProps> | ((props: Partial<ListItemSecondaryActionProps> & { ownerState: Partial<ListItemSecondaryActionProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiListItemText: { defaultProps?: Partial<ListItemTextProps<"span", "p">>; styleOverrides?: Partial<OverridesStyleRules<keyof ListItemTextClasses, "MuiListItemText", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<ListItemTextProps<"span", "p">> | ((props: Partial<ListItemTextProps<"span", "p">> & { ownerState: Partial<ListItemTextProps<"span", "p">>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiListSubheader: { defaultProps?: Partial<ListSubheaderProps>; styleOverrides?: Partial<OverridesStyleRules<keyof ListSubheaderClasses, "MuiListSubheader", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<ListSubheaderProps> | ((props: Partial<ListSubheaderProps> & { ownerState: Partial<ListSubheaderProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiMenu: { defaultProps?: Partial<MenuProps>; styleOverrides?: Partial<OverridesStyleRules<keyof MenuClasses, "MuiMenu", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<MenuProps> | ((props: Partial<MenuProps> & { ownerState: Partial<MenuProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiMenuItem: { defaultProps?: Partial<MenuItemProps>; styleOverrides?: Partial<OverridesStyleRules<keyof MenuItemClasses, "MuiMenuItem", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<MenuItemProps> | ((props: Partial<MenuItemProps> & { ownerState: Partial<MenuItemProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiMenuList: { defaultProps?: Partial<MenuListProps>; styleOverrides?: Partial<OverridesStyleRules<keyof ListClasses, "MuiMenuList", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<MenuListProps> | ((props: Partial<MenuListProps> & { ownerState: Partial<MenuListProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiMobileStepper: { defaultProps?: Partial<MobileStepperProps>; styleOverrides?: Partial<OverridesStyleRules<keyof MobileStepperClasses, "MuiMobileStepper", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<MobileStepperProps> | ((props: Partial<MobileStepperProps> & { ownerState: Partial<MobileStepperProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiModal: { defaultProps?: Partial<ModalProps>; styleOverrides?: Partial<OverridesStyleRules<keyof ModalClasses, "MuiModal", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<ModalProps> | ((props: Partial<ModalProps> & { ownerState: Partial<ModalProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiNativeSelect: { defaultProps?: Partial<NativeSelectProps>; styleOverrides?: Partial<OverridesStyleRules<keyof NativeSelectClasses, "MuiNativeSelect", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<NativeSelectProps> | ((props: Partial<NativeSelectProps> & { ownerState: Partial<NativeSelectProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiOutlinedInput: { defaultProps?: Partial<OutlinedInputProps>; styleOverrides?: Partial<OverridesStyleRules<keyof OutlinedInputClasses, "MuiOutlinedInput", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<OutlinedInputProps> | ((props: Partial<OutlinedInputProps> & { ownerState: Partial<OutlinedInputProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiPagination: { defaultProps?: Partial<PaginationProps>; styleOverrides?: Partial<OverridesStyleRules<keyof PaginationClasses, "MuiPagination", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<PaginationProps> | ((props: Partial<PaginationProps> & { ownerState: Partial<PaginationProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiPaginationItem: { defaultProps?: Partial<PaginationItemProps>; styleOverrides?: Partial<OverridesStyleRules<keyof PaginationItemClasses, "MuiPaginationItem", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<PaginationItemProps> | ((props: Partial<PaginationItemProps> & { ownerState: Partial<PaginationItemProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiPaper: { defaultProps?: Partial<PaperProps>; styleOverrides?: Partial<OverridesStyleRules<keyof PaperClasses, "MuiPaper", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<PaperProps> | ((props: Partial<PaperProps> & { ownerState: Partial<PaperProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiPopper: { defaultProps?: Partial<PopperProps>; styleOverrides?: Partial<OverridesStyleRules<"root", "MuiPopper", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; };
  MuiPopover: { defaultProps?: Partial<PopoverProps>; styleOverrides?: Partial<OverridesStyleRules<keyof PopoverClasses, "MuiPopover", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<PopoverProps> | ((props: Partial<PopoverProps> & { ownerState: Partial<PopoverProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiRadio: { defaultProps?: Partial<RadioProps>; styleOverrides?: Partial<OverridesStyleRules<keyof RadioClasses, "MuiRadio", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<RadioProps> | ((props: Partial<RadioProps> & { ownerState: Partial<RadioProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiRadioGroup: { defaultProps?: Partial<RadioGroupProps>; styleOverrides?: Partial<OverridesStyleRules<keyof FormGroupClasses, "MuiRadioGroup", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<RadioGroupProps> | ((props: Partial<RadioGroupProps> & { ownerState: Partial<RadioGroupProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiRating: { defaultProps?: Partial<RatingProps>; styleOverrides?: Partial<OverridesStyleRules<keyof RatingClasses, "MuiRating", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<RatingProps> | ((props: Partial<RatingProps> & { ownerState: Partial<RatingProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiScopedCssBaseline: { defaultProps?: Partial<ScopedCssBaselineProps>; styleOverrides?: Partial<OverridesStyleRules<"root", "MuiScopedCssBaseline", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<ScopedCssBaselineProps> | ((props: Partial<ScopedCssBaselineProps> & { ownerState: Partial<ScopedCssBaselineProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiSelect: { defaultProps?: Partial<SelectProps>; styleOverrides?: Partial<OverridesStyleRules<keyof SelectClasses, "MuiSelect", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<SelectProps> | ((props: Partial<SelectProps> & { ownerState: Partial<SelectProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiSkeleton: { defaultProps?: Partial<SkeletonProps>; styleOverrides?: Partial<OverridesStyleRules<keyof SkeletonClasses, "MuiSkeleton", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<SkeletonProps> | ((props: Partial<SkeletonProps> & { ownerState: Partial<SkeletonProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiSlider: { defaultProps?: Partial<SliderProps>; styleOverrides?: Partial<OverridesStyleRules<keyof SliderClasses, "MuiSlider", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<SliderProps> | ((props: Partial<SliderProps> & { ownerState: Partial<SliderProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiSnackbar: { defaultProps?: Partial<SnackbarProps>; styleOverrides?: Partial<OverridesStyleRules<keyof SnackbarClasses, "MuiSnackbar", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<SnackbarProps> | ((props: Partial<SnackbarProps> & { ownerState: Partial<SnackbarProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiSnackbarContent: { defaultProps?: Partial<SnackbarContentProps>; styleOverrides?: Partial<OverridesStyleRules<keyof SnackbarContentClasses, "MuiSnackbarContent", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<SnackbarContentProps> | ((props: Partial<SnackbarContentProps> & { ownerState: Partial<SnackbarContentProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiSpeedDial: { defaultProps?: Partial<SpeedDialProps>; styleOverrides?: Partial<OverridesStyleRules<keyof SpeedDialClasses, "MuiSpeedDial", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<SpeedDialProps> | ((props: Partial<SpeedDialProps> & { ownerState: Partial<SpeedDialProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiSpeedDialAction: { defaultProps?: Partial<SpeedDialActionProps>; styleOverrides?: Partial<OverridesStyleRules<keyof SpeedDialActionClasses, "MuiSpeedDialAction", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<SpeedDialActionProps> | ((props: Partial<SpeedDialActionProps> & { ownerState: Partial<SpeedDialActionProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiSpeedDialIcon: { defaultProps?: Partial<SpeedDialIconProps>; styleOverrides?: Partial<OverridesStyleRules<keyof SpeedDialIconClasses, "MuiSpeedDialIcon", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<SpeedDialIconProps> | ((props: Partial<SpeedDialIconProps> & { ownerState: Partial<SpeedDialIconProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiStack: { defaultProps?: Partial<StackProps>; styleOverrides?: Partial<OverridesStyleRules<"root", "MuiStack", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<StackProps> | ((props: Partial<StackProps> & { ownerState: Partial<StackProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiStep: { defaultProps?: Partial<StepProps>; styleOverrides?: Partial<OverridesStyleRules<keyof StepClasses, "MuiStep", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<StepProps> | ((props: Partial<StepProps> & { ownerState: Partial<StepProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiStepButton: { defaultProps?: Partial<StepButtonProps>; styleOverrides?: Partial<OverridesStyleRules<keyof StepButtonClasses, "MuiStepButton", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<StepButtonProps> | ((props: Partial<StepButtonProps> & { ownerState: Partial<StepButtonProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiStepConnector: { defaultProps?: Partial<StepConnectorProps>; styleOverrides?: Partial<OverridesStyleRules<keyof StepConnectorClasses, "MuiStepConnector", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<StepConnectorProps> | ((props: Partial<StepConnectorProps> & { ownerState: Partial<StepConnectorProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiStepContent: { defaultProps?: Partial<StepContentProps>; styleOverrides?: Partial<OverridesStyleRules<keyof StepContentClasses, "MuiStepContent", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<StepContentProps> | ((props: Partial<StepContentProps> & { ownerState: Partial<StepContentProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiStepIcon: { defaultProps?: Partial<StepIconProps>; styleOverrides?: Partial<OverridesStyleRules<keyof StepIconClasses, "MuiStepIcon", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<StepIconProps> | ((props: Partial<StepIconProps> & { ownerState: Partial<StepIconProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiStepLabel: { defaultProps?: Partial<StepLabelProps>; styleOverrides?: Partial<OverridesStyleRules<keyof StepLabelClasses, "MuiStepLabel", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<StepLabelProps> | ((props: Partial<StepLabelProps> & { ownerState: Partial<StepLabelProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiStepper: { defaultProps?: Partial<StepperProps>; styleOverrides?: Partial<OverridesStyleRules<keyof StepperClasses, "MuiStepper", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<StepperProps> | ((props: Partial<StepperProps> & { ownerState: Partial<StepperProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiSvgIcon: { defaultProps?: Partial<SvgIconProps>; styleOverrides?: Partial<OverridesStyleRules<keyof SvgIconClasses, "MuiSvgIcon", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<SvgIconProps> | ((props: Partial<SvgIconProps> & { ownerState: Partial<SvgIconProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiSwipeableDrawer: { defaultProps?: Partial<SwipeableDrawerProps>; };
  MuiSwitch: { defaultProps?: Partial<SwitchProps>; styleOverrides?: Partial<OverridesStyleRules<keyof SwitchClasses, "MuiSwitch", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<SwitchProps> | ((props: Partial<SwitchProps> & { ownerState: Partial<SwitchProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiTab: { defaultProps?: Partial<TabProps>; styleOverrides?: Partial<OverridesStyleRules<keyof TabClasses, "MuiTab", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<TabProps> | ((props: Partial<TabProps> & { ownerState: Partial<TabProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiTable: { defaultProps?: Partial<TableProps>; styleOverrides?: Partial<OverridesStyleRules<keyof TableClasses, "MuiTable", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<TableProps> | ((props: Partial<TableProps> & { ownerState: Partial<TableProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiTableBody: { defaultProps?: Partial<TableBodyProps>; styleOverrides?: Partial<OverridesStyleRules<"root", "MuiTableBody", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<TableBodyProps> | ((props: Partial<TableBodyProps> & { ownerState: Partial<TableBodyProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiTableCell: { defaultProps?: Partial<TableCellProps>; styleOverrides?: Partial<OverridesStyleRules<keyof TableCellClasses, "MuiTableCell", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<TableCellProps> | ((props: Partial<TableCellProps> & { ownerState: Partial<TableCellProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiTableContainer: { defaultProps?: Partial<TableContainerProps>; styleOverrides?: Partial<OverridesStyleRules<"root", "MuiTableContainer", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<TableContainerProps> | ((props: Partial<TableContainerProps> & { ownerState: Partial<TableContainerProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiTableFooter: { defaultProps?: Partial<TableFooterProps>; styleOverrides?: Partial<OverridesStyleRules<"root", "MuiTableFooter", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<TableFooterProps> | ((props: Partial<TableFooterProps> & { ownerState: Partial<TableFooterProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiTableHead: { defaultProps?: Partial<TableHeadProps>; styleOverrides?: Partial<OverridesStyleRules<"root", "MuiTableHead", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<TableHeadProps> | ((props: Partial<TableHeadProps> & { ownerState: Partial<TableHeadProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiTablePagination: { defaultProps?: Partial<TablePaginationProps>; styleOverrides?: Partial<OverridesStyleRules<keyof TablePaginationClasses, "MuiTablePagination", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<TablePaginationProps> | ((props: Partial<TablePaginationProps> & { ownerState: Partial<TablePaginationProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiTableRow: { defaultProps?: Partial<TableRowProps>; styleOverrides?: Partial<OverridesStyleRules<keyof TableRowClasses, "MuiTableRow", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<TableRowProps> | ((props: Partial<TableRowProps> & { ownerState: Partial<TableRowProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiTableSortLabel: { defaultProps?: Partial<TableSortLabelProps>; styleOverrides?: Partial<OverridesStyleRules<keyof TableSortLabelClasses, "MuiTableSortLabel", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<TableSortLabelProps> | ((props: Partial<TableSortLabelProps> & { ownerState: Partial<TableSortLabelProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiTabs: { defaultProps?: Partial<TabsProps>; styleOverrides?: Partial<OverridesStyleRules<keyof TabsClasses, "MuiTabs", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<TabsProps> | ((props: Partial<TabsProps> & { ownerState: Partial<TabsProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiTextField: { defaultProps?: Partial<TextFieldProps>; styleOverrides?: Partial<OverridesStyleRules<"root", "MuiTextField", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<TextFieldProps> | ((props: Partial<TextFieldProps> & { ownerState: Partial<TextFieldProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiToggleButton: { defaultProps?: Partial<ToggleButtonProps>; styleOverrides?: Partial<OverridesStyleRules<keyof ToggleButtonClasses, "MuiToggleButton", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<ToggleButtonProps> | ((props: Partial<ToggleButtonProps> & { ownerState: Partial<ToggleButtonProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiToggleButtonGroup: { defaultProps?: Partial<ToggleButtonGroupProps>; styleOverrides?: Partial<OverridesStyleRules<keyof ToggleButtonGroupClasses, "MuiToggleButtonGroup", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<ToggleButtonGroupProps> | ((props: Partial<ToggleButtonGroupProps> & { ownerState: Partial<ToggleButtonGroupProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiToolbar: { defaultProps?: Partial<ToolbarProps>; styleOverrides?: Partial<OverridesStyleRules<keyof ToolbarClasses, "MuiToolbar", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<ToolbarProps> | ((props: Partial<ToolbarProps> & { ownerState: Partial<ToolbarProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiTooltip: { defaultProps?: Partial<TooltipProps>; styleOverrides?: Partial<OverridesStyleRules<keyof TooltipClasses, "MuiTooltip", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<TooltipProps> | ((props: Partial<TooltipProps> & { ownerState: Partial<TooltipProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiTouchRipple: { defaultProps?: Partial<TouchRippleProps>; styleOverrides?: Partial<OverridesStyleRules<keyof TouchRippleClasses, "MuiTouchRipple", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<TouchRippleProps> | ((props: Partial<TouchRippleProps> & { ownerState: Partial<TouchRippleProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiTypography: { defaultProps?: Partial<TypographyProps>; styleOverrides?: Partial<OverridesStyleRules<keyof TypographyClasses, "MuiTypography", Omit<Theme, "palette" | "components"> & CssVarsTheme>>; variants?: { props: Partial<TypographyProps> | ((props: Partial<TypographyProps> & { ownerState: Partial<TypographyProps>; }) => boolean); style: Interpolation<{ theme: Omit<Theme, "palette" | "components"> & CssVarsTheme; }>; }[]; };
  MuiUseMediaQuery: { defaultProps?: Partial<UseMediaQueryOptions>; };
}

type colorSchemes = {
  light: ColorSystemOptions;
  dark: ColorSystemOptions;
}

type ColorSystemOptions = {
  palette: PaletteOptions & { background?: Partial<PaletteBackgroundChannel>; common?: Partial<PaletteCommonChannel>; primary?: Partial<PaletteColorChannel>; secondary?: Partial<PaletteColorChannel>; error?: Partial<PaletteColorChannel>; info?: Partial<PaletteColorChannel>; success?: Partial<PaletteColorChannel>; text?: Partial<PaletteTextChannel>; dividerChannel?: string; action?: Partial<PaletteActionChannel>; Alert?: Partial<PaletteAlert>; AppBar?: Partial<PaletteAppBar>; Avatar?: Partial<PaletteAvatar>; Button?: Partial<PaletteButton>; Chip?: Partial<PaletteChip>; FilledInput?: Partial<PaletteFilledInput>; LinearProgress?: Partial<PaletteLinearProgress>; Skeleton?: Partial<PaletteSkeleton>; Slider?: Partial<PaletteSlider>; SnackbarContent?: Partial<PaletteSnackbarContent>; SpeedDialAction?: Partial<PaletteSpeedDialAction>; StepConnector?: Partial<PaletteStepConnector>; StepContent?: Partial<PaletteStepContent>; Switch?: Partial<PaletteSwitch>; TableCell?: Partial<PaletteTableCell>; Tooltip?: Partial<PaletteTooltip>; };
  opacity: Partial<Opacity>;
  overlays: Overlays;
}

type PaletteOptions = {
  primary: PaletteColorOptions;
  secondary: PaletteColorOptions;
  error: PaletteColorOptions;
  warning: PaletteColorOptions;
  info: PaletteColorOptions;
  success: PaletteColorOptions;
  mode: PaletteMode;
  tonalOffset: PaletteTonalOffset;
  contrastThreshold: number;
  common: Partial<CommonColors>;
  grey: Partial<Color>;
  text: Partial<TypeText>;
  divider: string;
  action: Partial<TypeAction>;
  background: Partial<TypeBackground>;
  getContrastText: (background: string) => string;
}

type PaletteColorOptions = {
  
}

type SimplePaletteColorOptions = {
  light: string;
  main: string;
  dark: string;
  contrastText: string;
}

type TypographyOptions = {
  button: TypographyStyleOptions;
  caption: TypographyStyleOptions;
  h1: TypographyStyleOptions;
  h2: TypographyStyleOptions;
  h3: TypographyStyleOptions;
  h4: TypographyStyleOptions;
  h5: TypographyStyleOptions;
  h6: TypographyStyleOptions;
  body2: TypographyStyleOptions;
  body1: TypographyStyleOptions;
  subtitle1: TypographyStyleOptions;
  subtitle2: TypographyStyleOptions;
  overline: TypographyStyleOptions;
  allVariants: CSSProperties;
  fontFamily: FontFamily;
  fontSize: number;
  fontWeightLight: FontWeight;
  fontWeightRegular: FontWeight;
  fontWeightMedium: FontWeight;
  fontWeightBold: FontWeight;
  htmlFontSize: number;
}

type TypographyStyleOptions = {
  @font-face: Fontface | Fontface[];
  accentColor: AccentColor;
  alignContent: AlignContent;
  alignItems: AlignItems;
  alignSelf: AlignSelf;
  alignTracks: AlignTracks;
  animationComposition: AnimationComposition;
  animationDelay: AnimationDelay<string & {}>;
  animationDirection: AnimationDirection;
  animationDuration: AnimationDuration<string & {}>;
  animationFillMode: AnimationFillMode;
  animationIterationCount: AnimationIterationCount;
  animationName: AnimationName;
  animationPlayState: AnimationPlayState;
  animationRangeEnd: AnimationRangeEnd<string | number>;
  animationRangeStart: AnimationRangeStart<string | number>;
  animationTimeline: AnimationTimeline;
  animationTimingFunction: AnimationTimingFunction;
  appearance: Appearance;
  aspectRatio: AspectRatio;
  backdropFilter: BackdropFilter;
  backfaceVisibility: BackfaceVisibility;
  backgroundAttachment: BackgroundAttachment;
  backgroundBlendMode: BackgroundBlendMode;
  backgroundClip: BackgroundClip;
  backgroundColor: BackgroundColor;
  backgroundImage: BackgroundImage;
  backgroundOrigin: BackgroundOrigin;
  backgroundPositionX: BackgroundPositionX<string | number>;
  backgroundPositionY: BackgroundPositionY<string | number>;
  backgroundRepeat: BackgroundRepeat;
  backgroundSize: BackgroundSize<string | number>;
  blockOverflow: BlockOverflow;
  blockSize: BlockSize<string | number>;
  borderBlockColor: BorderBlockColor;
  borderBlockEndColor: BorderBlockEndColor;
  borderBlockEndStyle: BorderBlockEndStyle;
  borderBlockEndWidth: BorderBlockEndWidth<string | number>;
  borderBlockStartColor: BorderBlockStartColor;
  borderBlockStartStyle: BorderBlockStartStyle;
  borderBlockStartWidth: BorderBlockStartWidth<string | number>;
  borderBlockStyle: BorderBlockStyle;
  borderBlockWidth: BorderBlockWidth<string | number>;
  borderBottomColor: BorderBottomColor;
  borderBottomLeftRadius: BorderBottomLeftRadius<string | number>;
  borderBottomRightRadius: BorderBottomRightRadius<string | number>;
  borderBottomStyle: BorderBottomStyle;
  borderBottomWidth: BorderBottomWidth<string | number>;
  borderCollapse: BorderCollapse;
  borderEndEndRadius: BorderEndEndRadius<string | number>;
  borderEndStartRadius: BorderEndStartRadius<string | number>;
  borderImageOutset: BorderImageOutset<string | number>;
  borderImageRepeat: BorderImageRepeat;
  borderImageSlice: BorderImageSlice;
  borderImageSource: BorderImageSource;
  borderImageWidth: BorderImageWidth<string | number>;
  borderInlineColor: BorderInlineColor;
  borderInlineEndColor: BorderInlineEndColor;
  borderInlineEndStyle: BorderInlineEndStyle;
  borderInlineEndWidth: BorderInlineEndWidth<string | number>;
  borderInlineStartColor: BorderInlineStartColor;
  borderInlineStartStyle: BorderInlineStartStyle;
  borderInlineStartWidth: BorderInlineStartWidth<string | number>;
  borderInlineStyle: BorderInlineStyle;
  borderInlineWidth: BorderInlineWidth<string | number>;
  borderLeftColor: BorderLeftColor;
  borderLeftStyle: BorderLeftStyle;
  borderLeftWidth: BorderLeftWidth<string | number>;
  borderRightColor: BorderRightColor;
  borderRightStyle: BorderRightStyle;
  borderRightWidth: BorderRightWidth<string | number>;
  borderSpacing: BorderSpacing<string | number>;
  borderStartEndRadius: BorderStartEndRadius<string | number>;
  borderStartStartRadius: BorderStartStartRadius<string | number>;
  borderTopColor: BorderTopColor;
  borderTopLeftRadius: BorderTopLeftRadius<string | number>;
  borderTopRightRadius: BorderTopRightRadius<string | number>;
  borderTopStyle: BorderTopStyle;
  borderTopWidth: BorderTopWidth<string | number>;
  bottom: Bottom<string | number>;
  boxDecorationBreak: BoxDecorationBreak;
  boxShadow: BoxShadow;
  boxSizing: BoxSizing;
  breakAfter: BreakAfter;
  breakBefore: BreakBefore;
  breakInside: BreakInside;
  captionSide: CaptionSide;
  caretColor: CaretColor;
  caretShape: CaretShape;
  clear: Clear;
  clipPath: ClipPath;
  color: Color;
  colorAdjust: PrintColorAdjust;
  colorScheme: ColorScheme;
  columnCount: ColumnCount;
  columnFill: ColumnFill;
  columnGap: ColumnGap<string | number>;
  columnRuleColor: ColumnRuleColor;
  columnRuleStyle: ColumnRuleStyle;
  columnRuleWidth: ColumnRuleWidth<string | number>;
  columnSpan: ColumnSpan;
  columnWidth: ColumnWidth<string | number>;
  contain: Contain;
  containIntrinsicBlockSize: ContainIntrinsicBlockSize<string | number>;
  containIntrinsicHeight: ContainIntrinsicHeight<string | number>;
  containIntrinsicInlineSize: ContainIntrinsicInlineSize<string | number>;
  containIntrinsicWidth: ContainIntrinsicWidth<string | number>;
  containerName: ContainerName;
  containerType: ContainerType;
  content: Content;
  contentVisibility: ContentVisibility;
  counterIncrement: CounterIncrement;
  counterReset: CounterReset;
  counterSet: CounterSet;
  cursor: Cursor;
  direction: Direction;
  display: Display;
  emptyCells: EmptyCells;
  filter: Filter;
  flexBasis: FlexBasis<string | number>;
  flexDirection: FlexDirection;
  flexGrow: FlexGrow;
  flexShrink: FlexShrink;
  flexWrap: FlexWrap;
  float: Float;
  fontFamily: FontFamily;
  fontFeatureSettings: FontFeatureSettings;
  fontKerning: FontKerning;
  fontLanguageOverride: FontLanguageOverride;
  fontOpticalSizing: FontOpticalSizing;
  fontPalette: FontPalette;
  fontSize: FontSize<string | number>;
  fontSizeAdjust: FontSizeAdjust;
  fontSmooth: FontSmooth<string | number>;
  fontStretch: FontStretch;
  fontStyle: FontStyle;
  fontSynthesis: FontSynthesis;
  fontSynthesisPosition: FontSynthesisPosition;
  fontSynthesisSmallCaps: FontSynthesisSmallCaps;
  fontSynthesisStyle: FontSynthesisStyle;
  fontSynthesisWeight: FontSynthesisWeight;
  fontVariant: FontVariant;
  fontVariantAlternates: FontVariantAlternates;
  fontVariantCaps: FontVariantCaps;
  fontVariantEastAsian: FontVariantEastAsian;
  fontVariantEmoji: FontVariantEmoji;
  fontVariantLigatures: FontVariantLigatures;
  fontVariantNumeric: FontVariantNumeric;
  fontVariantPosition: FontVariantPosition;
  fontVariationSettings: FontVariationSettings;
  fontWeight: FontWeight;
  forcedColorAdjust: ForcedColorAdjust;
  gridAutoColumns: GridAutoColumns<string | number>;
  gridAutoFlow: GridAutoFlow;
  gridAutoRows: GridAutoRows<string | number>;
  gridColumnEnd: GridColumnEnd;
  gridColumnStart: GridColumnStart;
  gridRowEnd: GridRowEnd;
  gridRowStart: GridRowStart;
  gridTemplateAreas: GridTemplateAreas;
  gridTemplateColumns: GridTemplateColumns<string | number>;
  gridTemplateRows: GridTemplateRows<string | number>;
  hangingPunctuation: HangingPunctuation;
  height: Height<string | number>;
  hyphenateCharacter: HyphenateCharacter;
  hyphenateLimitChars: HyphenateLimitChars;
  hyphens: Hyphens;
  imageOrientation: ImageOrientation;
  imageRendering: ImageRendering;
  imageResolution: ImageResolution;
  initialLetter: InitialLetter;
  inlineSize: InlineSize<string | number>;
  inputSecurity: InputSecurity;
  insetBlockEnd: InsetBlockEnd<string | number>;
  insetBlockStart: InsetBlockStart<string | number>;
  insetInlineEnd: InsetInlineEnd<string | number>;
  insetInlineStart: InsetInlineStart<string | number>;
  isolation: Isolation;
  justifyContent: JustifyContent;
  justifyItems: JustifyItems;
  justifySelf: JustifySelf;
  justifyTracks: JustifyTracks;
  left: Left<string | number>;
  letterSpacing: LetterSpacing<string | number>;
  lineBreak: LineBreak;
  lineHeight: LineHeight<string | number>;
  lineHeightStep: LineHeightStep<string | number>;
  listStyleImage: ListStyleImage;
  listStylePosition: ListStylePosition;
  listStyleType: ListStyleType;
  marginBlockEnd: MarginBlockEnd<string | number>;
  marginBlockStart: MarginBlockStart<string | number>;
  marginBottom: MarginBottom<string | number>;
  marginInlineEnd: MarginInlineEnd<string | number>;
  marginInlineStart: MarginInlineStart<string | number>;
  marginLeft: MarginLeft<string | number>;
  marginRight: MarginRight<string | number>;
  marginTop: MarginTop<string | number>;
  marginTrim: MarginTrim;
  maskBorderMode: MaskBorderMode;
  maskBorderOutset: MaskBorderOutset<string | number>;
  maskBorderRepeat: MaskBorderRepeat;
  maskBorderSlice: MaskBorderSlice;
  maskBorderSource: MaskBorderSource;
  maskBorderWidth: MaskBorderWidth<string | number>;
  maskClip: MaskClip;
  maskComposite: MaskComposite;
  maskImage: MaskImage;
  maskMode: MaskMode;
  maskOrigin: MaskOrigin;
  maskPosition: MaskPosition<string | number>;
  maskRepeat: MaskRepeat;
  maskSize: MaskSize<string | number>;
  maskType: MaskType;
  masonryAutoFlow: MasonryAutoFlow;
  mathDepth: MathDepth;
  mathShift: MathShift;
  mathStyle: MathStyle;
  maxBlockSize: MaxBlockSize<string | number>;
  maxHeight: MaxHeight<string | number>;
  maxInlineSize: MaxInlineSize<string | number>;
  maxLines: MaxLines;
  maxWidth: MaxWidth<string | number>;
  minBlockSize: MinBlockSize<string | number>;
  minHeight: MinHeight<string | number>;
  minInlineSize: MinInlineSize<string | number>;
  minWidth: MinWidth<string | number>;
  mixBlendMode: MixBlendMode;
  motionDistance: OffsetDistance<string | number>;
  motionPath: OffsetPath;
  motionRotation: OffsetRotate;
  objectFit: ObjectFit;
  objectPosition: ObjectPosition<string | number>;
  offsetAnchor: OffsetAnchor<string | number>;
  offsetDistance: OffsetDistance<string | number>;
  offsetPath: OffsetPath;
  offsetPosition: OffsetPosition<string | number>;
  offsetRotate: OffsetRotate;
  offsetRotation: OffsetRotate;
  opacity: Opacity;
  order: Order;
  orphans: Orphans;
  outlineColor: OutlineColor;
  outlineOffset: OutlineOffset<string | number>;
  outlineStyle: OutlineStyle;
  outlineWidth: OutlineWidth<string | number>;
  overflowAnchor: OverflowAnchor;
  overflowBlock: OverflowBlock;
  overflowClipBox: OverflowClipBox;
  overflowClipMargin: OverflowClipMargin<string | number>;
  overflowInline: OverflowInline;
  overflowWrap: OverflowWrap;
  overflowX: OverflowX;
  overflowY: OverflowY;
  overlay: Overlay;
  overscrollBehaviorBlock: OverscrollBehaviorBlock;
  overscrollBehaviorInline: OverscrollBehaviorInline;
  overscrollBehaviorX: OverscrollBehaviorX;
  overscrollBehaviorY: OverscrollBehaviorY;
  paddingBlockEnd: PaddingBlockEnd<string | number>;
  paddingBlockStart: PaddingBlockStart<string | number>;
  paddingBottom: PaddingBottom<string | number>;
  paddingInlineEnd: PaddingInlineEnd<string | number>;
  paddingInlineStart: PaddingInlineStart<string | number>;
  paddingLeft: PaddingLeft<string | number>;
  paddingRight: PaddingRight<string | number>;
  paddingTop: PaddingTop<string | number>;
  page: Page;
  pageBreakAfter: PageBreakAfter;
  pageBreakBefore: PageBreakBefore;
  pageBreakInside: PageBreakInside;
  paintOrder: PaintOrder;
  perspective: Perspective<string | number>;
  perspectiveOrigin: PerspectiveOrigin<string | number>;
  pointerEvents: PointerEvents;
  position: Position;
  printColorAdjust: PrintColorAdjust;
  quotes: Quotes;
  resize: Resize;
  right: Right<string | number>;
  rotate: Rotate;
  rowGap: RowGap<string | number>;
  rubyAlign: RubyAlign;
  rubyMerge: RubyMerge;
  rubyPosition: RubyPosition;
  scale: Scale;
  scrollBehavior: ScrollBehavior;
  scrollMarginBlockEnd: ScrollMarginBlockEnd<string | number>;
  scrollMarginBlockStart: ScrollMarginBlockStart<string | number>;
  scrollMarginBottom: ScrollMarginBottom<string | number>;
  scrollMarginInlineEnd: ScrollMarginInlineEnd<string | number>;
  scrollMarginInlineStart: ScrollMarginInlineStart<string | number>;
  scrollMarginLeft: ScrollMarginLeft<string | number>;
  scrollMarginRight: ScrollMarginRight<string | number>;
  scrollMarginTop: ScrollMarginTop<string | number>;
  scrollPaddingBlockEnd: ScrollPaddingBlockEnd<string | number>;
  scrollPaddingBlockStart: ScrollPaddingBlockStart<string | number>;
  scrollPaddingBottom: ScrollPaddingBottom<string | number>;
  scrollPaddingInlineEnd: ScrollPaddingInlineEnd<string | number>;
  scrollPaddingInlineStart: ScrollPaddingInlineStart<string | number>;
  scrollPaddingLeft: ScrollPaddingLeft<string | number>;
  scrollPaddingRight: ScrollPaddingRight<string | number>;
  scrollPaddingTop: ScrollPaddingTop<string | number>;
  scrollSnapAlign: ScrollSnapAlign;
  scrollSnapMarginBottom: ScrollMarginBottom<string | number>;
  scrollSnapMarginLeft: ScrollMarginLeft<string | number>;
  scrollSnapMarginRight: ScrollMarginRight<string | number>;
  scrollSnapMarginTop: ScrollMarginTop<string | number>;
  scrollSnapStop: ScrollSnapStop;
  scrollSnapType: ScrollSnapType;
  scrollTimelineAxis: ScrollTimelineAxis;
  scrollTimelineName: ScrollTimelineName;
  scrollbarColor: ScrollbarColor;
  scrollbarGutter: ScrollbarGutter;
  scrollbarWidth: ScrollbarWidth;
  shapeImageThreshold: ShapeImageThreshold;
  shapeMargin: ShapeMargin<string | number>;
  shapeOutside: ShapeOutside;
  tabSize: TabSize<string | number>;
  tableLayout: TableLayout;
  textAlign: TextAlign;
  textAlignLast: TextAlignLast;
  textCombineUpright: TextCombineUpright;
  textDecorationColor: TextDecorationColor;
  textDecorationLine: TextDecorationLine;
  textDecorationSkip: TextDecorationSkip;
  textDecorationSkipInk: TextDecorationSkipInk;
  textDecorationStyle: TextDecorationStyle;
  textDecorationThickness: TextDecorationThickness<string | number>;
  textEmphasisColor: TextEmphasisColor;
  textEmphasisPosition: TextEmphasisPosition;
  textEmphasisStyle: TextEmphasisStyle;
  textIndent: TextIndent<string | number>;
  textJustify: TextJustify;
  textOrientation: TextOrientation;
  textOverflow: TextOverflow;
  textRendering: TextRendering;
  textShadow: TextShadow;
  textSizeAdjust: TextSizeAdjust;
  textTransform: TextTransform;
  textUnderlineOffset: TextUnderlineOffset<string | number>;
  textUnderlinePosition: TextUnderlinePosition;
  textWrap: TextWrap;
  timelineScope: TimelineScope;
  top: Top<string | number>;
  touchAction: TouchAction;
  transform: Transform;
  transformBox: TransformBox;
  transformOrigin: TransformOrigin<string | number>;
  transformStyle: TransformStyle;
  transitionBehavior: TransitionBehavior;
  transitionDelay: TransitionDelay<string & {}>;
  transitionDuration: TransitionDuration<string & {}>;
  transitionProperty: TransitionProperty;
  transitionTimingFunction: TransitionTimingFunction;
  translate: Translate<string | number>;
  unicodeBidi: UnicodeBidi;
  userSelect: UserSelect;
  verticalAlign: VerticalAlign<string | number>;
  viewTimelineAxis: ViewTimelineAxis;
  viewTimelineInset: ViewTimelineInset<string | number>;
  viewTimelineName: ViewTimelineName;
  viewTransitionName: ViewTransitionName;
  visibility: Visibility;
  whiteSpace: WhiteSpace;
  whiteSpaceCollapse: WhiteSpaceCollapse;
  whiteSpaceTrim: WhiteSpaceTrim;
  widows: Widows;
  width: Width<string | number>;
  willChange: WillChange;
  wordBreak: WordBreak;
  wordSpacing: WordSpacing<string | number>;
  wordWrap: WordWrap;
  writingMode: WritingMode;
  zIndex: ZIndex;
  zoom: Zoom;
  all: Globals;
  animation: Animation<string & {}>;
  animationRange: AnimationRange<string | number>;
  background: Background<string | number>;
  backgroundPosition: BackgroundPosition<string | number>;
  border: Border<string | number>;
  borderBlock: BorderBlock<string | number>;
  borderBlockEnd: BorderBlockEnd<string | number>;
  borderBlockStart: BorderBlockStart<string | number>;
  borderBottom: BorderBottom<string | number>;
  borderColor: BorderColor;
  borderImage: BorderImage;
  borderInline: BorderInline<string | number>;
  borderInlineEnd: BorderInlineEnd<string | number>;
  borderInlineStart: BorderInlineStart<string | number>;
  borderLeft: BorderLeft<string | number>;
  borderRadius: BorderRadius<string | number>;
  borderRight: BorderRight<string | number>;
  borderStyle: BorderStyle;
  borderTop: BorderTop<string | number>;
  borderWidth: BorderWidth<string | number>;
  caret: Caret;
  columnRule: ColumnRule<string | number>;
  columns: Columns<string | number>;
  containIntrinsicSize: ContainIntrinsicSize<string | number>;
  container: Container;
  flex: Flex<string | number>;
  flexFlow: FlexFlow;
  font: Font;
  gap: Gap<string | number>;
  grid: Grid;
  gridArea: GridArea;
  gridColumn: GridColumn;
  gridRow: GridRow;
  gridTemplate: GridTemplate;
  inset: Inset<string | number>;
  insetBlock: InsetBlock<string | number>;
  insetInline: InsetInline<string | number>;
  lineClamp: LineClamp;
  listStyle: ListStyle;
  margin: Margin<string | number>;
  marginBlock: MarginBlock<string | number>;
  marginInline: MarginInline<string | number>;
  mask: Mask<string | number>;
  maskBorder: MaskBorder;
  motion: Offset<string | number>;
  offset: Offset<string | number>;
  outline: Outline<string | number>;
  overflow: Overflow;
  overscrollBehavior: OverscrollBehavior;
  padding: Padding<string | number>;
  paddingBlock: PaddingBlock<string | number>;
  paddingInline: PaddingInline<string | number>;
  placeContent: PlaceContent;
  placeItems: PlaceItems;
  placeSelf: PlaceSelf;
  scrollMargin: ScrollMargin<string | number>;
  scrollMarginBlock: ScrollMarginBlock<string | number>;
  scrollMarginInline: ScrollMarginInline<string | number>;
  scrollPadding: ScrollPadding<string | number>;
  scrollPaddingBlock: ScrollPaddingBlock<string | number>;
  scrollPaddingInline: ScrollPaddingInline<string | number>;
  scrollSnapMargin: ScrollMargin<string | number>;
  scrollTimeline: ScrollTimeline;
  textDecoration: TextDecoration<string | number>;
  textEmphasis: TextEmphasis;
  transition: Transition<string & {}>;
  viewTimeline: ViewTimeline;
  MozAnimationDelay: AnimationDelay<string & {}>;
  MozAnimationDirection: AnimationDirection;
  MozAnimationDuration: AnimationDuration<string & {}>;
  MozAnimationFillMode: AnimationFillMode;
  MozAnimationIterationCount: AnimationIterationCount;
  MozAnimationName: AnimationName;
  MozAnimationPlayState: AnimationPlayState;
  MozAnimationTimingFunction: AnimationTimingFunction;
  MozAppearance: MozAppearance;
  MozBinding: MozBinding;
  MozBorderBottomColors: MozBorderBottomColors;
  MozBorderEndColor: BorderInlineEndColor;
  MozBorderEndStyle: BorderInlineEndStyle;
  MozBorderEndWidth: BorderInlineEndWidth<string | number>;
  MozBorderLeftColors: MozBorderLeftColors;
  MozBorderRightColors: MozBorderRightColors;
  MozBorderStartColor: BorderInlineStartColor;
  MozBorderStartStyle: BorderInlineStartStyle;
  MozBorderTopColors: MozBorderTopColors;
  MozBoxSizing: BoxSizing;
  MozColumnCount: ColumnCount;
  MozColumnFill: ColumnFill;
  MozColumnRuleColor: ColumnRuleColor;
  MozColumnRuleStyle: ColumnRuleStyle;
  MozColumnRuleWidth: ColumnRuleWidth<string | number>;
  MozColumnWidth: ColumnWidth<string | number>;
  MozContextProperties: MozContextProperties;
  MozFontFeatureSettings: FontFeatureSettings;
  MozFontLanguageOverride: FontLanguageOverride;
  MozHyphens: Hyphens;
  MozImageRegion: MozImageRegion;
  MozMarginEnd: MarginInlineEnd<string | number>;
  MozMarginStart: MarginInlineStart<string | number>;
  MozOrient: MozOrient;
  MozOsxFontSmoothing: FontSmooth<string | number>;
  MozOutlineRadiusBottomleft: MozOutlineRadiusBottomleft<string | number>;
  MozOutlineRadiusBottomright: MozOutlineRadiusBottomright<string | number>;
  MozOutlineRadiusTopleft: MozOutlineRadiusTopleft<string | number>;
  MozOutlineRadiusTopright: MozOutlineRadiusTopright<string | number>;
  MozPaddingEnd: PaddingInlineEnd<string | number>;
  MozPaddingStart: PaddingInlineStart<string | number>;
  MozStackSizing: MozStackSizing;
  MozTabSize: TabSize<string | number>;
  MozTextBlink: MozTextBlink;
  MozTextSizeAdjust: TextSizeAdjust;
  MozUserFocus: MozUserFocus;
  MozUserModify: MozUserModify;
  MozUserSelect: UserSelect;
  MozWindowDragging: MozWindowDragging;
  MozWindowShadow: MozWindowShadow;
  msAccelerator: MsAccelerator;
  msBlockProgression: MsBlockProgression;
  msContentZoomChaining: MsContentZoomChaining;
  msContentZoomLimitMax: MsContentZoomLimitMax;
  msContentZoomLimitMin: MsContentZoomLimitMin;
  msContentZoomSnapPoints: MsContentZoomSnapPoints;
  msContentZoomSnapType: MsContentZoomSnapType;
  msContentZooming: MsContentZooming;
  msFilter: MsFilter;
  msFlexDirection: FlexDirection;
  msFlexPositive: FlexGrow;
  msFlowFrom: MsFlowFrom;
  msFlowInto: MsFlowInto;
  msGridColumns: MsGridColumns<string | number>;
  msGridRows: MsGridRows<string | number>;
  msHighContrastAdjust: MsHighContrastAdjust;
  msHyphenateLimitChars: MsHyphenateLimitChars;
  msHyphenateLimitLines: MsHyphenateLimitLines;
  msHyphenateLimitZone: MsHyphenateLimitZone<string | number>;
  msHyphens: Hyphens;
  msImeAlign: MsImeAlign;
  msLineBreak: LineBreak;
  msOrder: Order;
  msOverflowStyle: MsOverflowStyle;
  msOverflowX: OverflowX;
  msOverflowY: OverflowY;
  msScrollChaining: MsScrollChaining;
  msScrollLimitXMax: MsScrollLimitXMax<string | number>;
  msScrollLimitXMin: MsScrollLimitXMin<string | number>;
  msScrollLimitYMax: MsScrollLimitYMax<string | number>;
  msScrollLimitYMin: MsScrollLimitYMin<string | number>;
  msScrollRails: MsScrollRails;
  msScrollSnapPointsX: MsScrollSnapPointsX;
  msScrollSnapPointsY: MsScrollSnapPointsY;
  msScrollSnapType: MsScrollSnapType;
  msScrollTranslation: MsScrollTranslation;
  msScrollbar3dlightColor: MsScrollbar3dlightColor;
  msScrollbarArrowColor: MsScrollbarArrowColor;
  msScrollbarBaseColor: MsScrollbarBaseColor;
  msScrollbarDarkshadowColor: MsScrollbarDarkshadowColor;
  msScrollbarFaceColor: MsScrollbarFaceColor;
  msScrollbarHighlightColor: MsScrollbarHighlightColor;
  msScrollbarShadowColor: MsScrollbarShadowColor;
  msScrollbarTrackColor: MsScrollbarTrackColor;
  msTextAutospace: MsTextAutospace;
  msTextCombineHorizontal: TextCombineUpright;
  msTextOverflow: TextOverflow;
  msTouchAction: TouchAction;
  msTouchSelect: MsTouchSelect;
  msTransform: Transform;
  msTransformOrigin: TransformOrigin<string | number>;
  msTransitionDelay: TransitionDelay<string & {}>;
  msTransitionDuration: TransitionDuration<string & {}>;
  msTransitionProperty: TransitionProperty;
  msTransitionTimingFunction: TransitionTimingFunction;
  msUserSelect: MsUserSelect;
  msWordBreak: WordBreak;
  msWrapFlow: MsWrapFlow;
  msWrapMargin: MsWrapMargin<string | number>;
  msWrapThrough: MsWrapThrough;
  msWritingMode: WritingMode;
  WebkitAlignContent: AlignContent;
  WebkitAlignItems: AlignItems;
  WebkitAlignSelf: AlignSelf;
  WebkitAnimationDelay: AnimationDelay<string & {}>;
  WebkitAnimationDirection: AnimationDirection;
  WebkitAnimationDuration: AnimationDuration<string & {}>;
  WebkitAnimationFillMode: AnimationFillMode;
  WebkitAnimationIterationCount: AnimationIterationCount;
  WebkitAnimationName: AnimationName;
  WebkitAnimationPlayState: AnimationPlayState;
  WebkitAnimationTimingFunction: AnimationTimingFunction;
  WebkitAppearance: WebkitAppearance;
  WebkitBackdropFilter: BackdropFilter;
  WebkitBackfaceVisibility: BackfaceVisibility;
  WebkitBackgroundClip: BackgroundClip;
  WebkitBackgroundOrigin: BackgroundOrigin;
  WebkitBackgroundSize: BackgroundSize<string | number>;
  WebkitBorderBeforeColor: WebkitBorderBeforeColor;
  WebkitBorderBeforeStyle: WebkitBorderBeforeStyle;
  WebkitBorderBeforeWidth: WebkitBorderBeforeWidth<string | number>;
  WebkitBorderBottomLeftRadius: BorderBottomLeftRadius<string | number>;
  WebkitBorderBottomRightRadius: BorderBottomRightRadius<string | number>;
  WebkitBorderImageSlice: BorderImageSlice;
  WebkitBorderTopLeftRadius: BorderTopLeftRadius<string | number>;
  WebkitBorderTopRightRadius: BorderTopRightRadius<string | number>;
  WebkitBoxDecorationBreak: BoxDecorationBreak;
  WebkitBoxReflect: WebkitBoxReflect<string | number>;
  WebkitBoxShadow: BoxShadow;
  WebkitBoxSizing: BoxSizing;
  WebkitClipPath: ClipPath;
  WebkitColumnCount: ColumnCount;
  WebkitColumnFill: ColumnFill;
  WebkitColumnRuleColor: ColumnRuleColor;
  WebkitColumnRuleStyle: ColumnRuleStyle;
  WebkitColumnRuleWidth: ColumnRuleWidth<string | number>;
  WebkitColumnSpan: ColumnSpan;
  WebkitColumnWidth: ColumnWidth<string | number>;
  WebkitFilter: Filter;
  WebkitFlexBasis: FlexBasis<string | number>;
  WebkitFlexDirection: FlexDirection;
  WebkitFlexGrow: FlexGrow;
  WebkitFlexShrink: FlexShrink;
  WebkitFlexWrap: FlexWrap;
  WebkitFontFeatureSettings: FontFeatureSettings;
  WebkitFontKerning: FontKerning;
  WebkitFontSmoothing: FontSmooth<string | number>;
  WebkitFontVariantLigatures: FontVariantLigatures;
  WebkitHyphenateCharacter: HyphenateCharacter;
  WebkitHyphens: Hyphens;
  WebkitInitialLetter: InitialLetter;
  WebkitJustifyContent: JustifyContent;
  WebkitLineBreak: LineBreak;
  WebkitLineClamp: WebkitLineClamp;
  WebkitMarginEnd: MarginInlineEnd<string | number>;
  WebkitMarginStart: MarginInlineStart<string | number>;
  WebkitMaskAttachment: WebkitMaskAttachment;
  WebkitMaskBoxImageOutset: MaskBorderOutset<string | number>;
  WebkitMaskBoxImageRepeat: MaskBorderRepeat;
  WebkitMaskBoxImageSlice: MaskBorderSlice;
  WebkitMaskBoxImageSource: MaskBorderSource;
  WebkitMaskBoxImageWidth: MaskBorderWidth<string | number>;
  WebkitMaskClip: WebkitMaskClip;
  WebkitMaskComposite: WebkitMaskComposite;
  WebkitMaskImage: WebkitMaskImage;
  WebkitMaskOrigin: WebkitMaskOrigin;
  WebkitMaskPosition: WebkitMaskPosition<string | number>;
  WebkitMaskPositionX: WebkitMaskPositionX<string | number>;
  WebkitMaskPositionY: WebkitMaskPositionY<string | number>;
  WebkitMaskRepeat: WebkitMaskRepeat;
  WebkitMaskRepeatX: WebkitMaskRepeatX;
  WebkitMaskRepeatY: WebkitMaskRepeatY;
  WebkitMaskSize: WebkitMaskSize<string | number>;
  WebkitMaxInlineSize: MaxInlineSize<string | number>;
  WebkitOrder: Order;
  WebkitOverflowScrolling: WebkitOverflowScrolling;
  WebkitPaddingEnd: PaddingInlineEnd<string | number>;
  WebkitPaddingStart: PaddingInlineStart<string | number>;
  WebkitPerspective: Perspective<string | number>;
  WebkitPerspectiveOrigin: PerspectiveOrigin<string | number>;
  WebkitPrintColorAdjust: PrintColorAdjust;
  WebkitRubyPosition: RubyPosition;
  WebkitScrollSnapType: ScrollSnapType;
  WebkitShapeMargin: ShapeMargin<string | number>;
  WebkitTapHighlightColor: WebkitTapHighlightColor;
  WebkitTextCombine: TextCombineUpright;
  WebkitTextDecorationColor: TextDecorationColor;
  WebkitTextDecorationLine: TextDecorationLine;
  WebkitTextDecorationSkip: TextDecorationSkip;
  WebkitTextDecorationStyle: TextDecorationStyle;
  WebkitTextEmphasisColor: TextEmphasisColor;
  WebkitTextEmphasisPosition: TextEmphasisPosition;
  WebkitTextEmphasisStyle: TextEmphasisStyle;
  WebkitTextFillColor: WebkitTextFillColor;
  WebkitTextOrientation: TextOrientation;
  WebkitTextSizeAdjust: TextSizeAdjust;
  WebkitTextStrokeColor: WebkitTextStrokeColor;
  WebkitTextStrokeWidth: WebkitTextStrokeWidth<string | number>;
  WebkitTextUnderlinePosition: TextUnderlinePosition;
  WebkitTouchCallout: WebkitTouchCallout;
  WebkitTransform: Transform;
  WebkitTransformOrigin: TransformOrigin<string | number>;
  WebkitTransformStyle: TransformStyle;
  WebkitTransitionDelay: TransitionDelay<string & {}>;
  WebkitTransitionDuration: TransitionDuration<string & {}>;
  WebkitTransitionProperty: TransitionProperty;
  WebkitTransitionTimingFunction: TransitionTimingFunction;
  WebkitUserModify: WebkitUserModify;
  WebkitUserSelect: UserSelect;
  WebkitWritingMode: WritingMode;
  MozAnimation: Animation<string & {}>;
  MozBorderImage: BorderImage;
  MozColumnRule: ColumnRule<string | number>;
  MozColumns: Columns<string | number>;
  MozOutlineRadius: MozOutlineRadius<string | number>;
  msContentZoomLimit: MsContentZoomLimit;
  msContentZoomSnap: MsContentZoomSnap;
  msFlex: Flex<string | number>;
  msScrollLimit: MsScrollLimit;
  msScrollSnapX: MsScrollSnapX;
  msScrollSnapY: MsScrollSnapY;
  msTransition: Transition<string & {}>;
  WebkitAnimation: Animation<string & {}>;
  WebkitBorderBefore: WebkitBorderBefore<string | number>;
  WebkitBorderImage: BorderImage;
  WebkitBorderRadius: BorderRadius<string | number>;
  WebkitColumnRule: ColumnRule<string | number>;
  WebkitColumns: Columns<string | number>;
  WebkitFlex: Flex<string | number>;
  WebkitFlexFlow: FlexFlow;
  WebkitMask: WebkitMask<string | number>;
  WebkitMaskBoxImage: MaskBorder;
  WebkitTextEmphasis: TextEmphasis;
  WebkitTextStroke: WebkitTextStroke<string | number>;
  WebkitTransition: Transition<string & {}>;
  azimuth: Azimuth;
  boxAlign: BoxAlign;
  boxDirection: BoxDirection;
  boxFlex: BoxFlex;
  boxFlexGroup: BoxFlexGroup;
  boxLines: BoxLines;
  boxOrdinalGroup: BoxOrdinalGroup;
  boxOrient: BoxOrient;
  boxPack: BoxPack;
  clip: Clip;
  gridColumnGap: GridColumnGap<string | number>;
  gridGap: GridGap<string | number>;
  gridRowGap: GridRowGap<string | number>;
  imeMode: ImeMode;
  offsetBlock: InsetBlock<string | number>;
  offsetBlockEnd: InsetBlockEnd<string | number>;
  offsetBlockStart: InsetBlockStart<string | number>;
  offsetInline: InsetInline<string | number>;
  offsetInlineEnd: InsetInlineEnd<string | number>;
  offsetInlineStart: InsetInlineStart<string | number>;
  scrollSnapCoordinate: ScrollSnapCoordinate<string | number>;
  scrollSnapDestination: ScrollSnapDestination<string | number>;
  scrollSnapPointsX: ScrollSnapPointsX;
  scrollSnapPointsY: ScrollSnapPointsY;
  scrollSnapTypeX: ScrollSnapTypeX;
  scrollSnapTypeY: ScrollSnapTypeY;
  KhtmlBoxAlign: BoxAlign;
  KhtmlBoxDirection: BoxDirection;
  KhtmlBoxFlex: BoxFlex;
  KhtmlBoxFlexGroup: BoxFlexGroup;
  KhtmlBoxLines: BoxLines;
  KhtmlBoxOrdinalGroup: BoxOrdinalGroup;
  KhtmlBoxOrient: BoxOrient;
  KhtmlBoxPack: BoxPack;
  KhtmlLineBreak: LineBreak;
  KhtmlOpacity: Opacity;
  KhtmlUserSelect: UserSelect;
  MozBackfaceVisibility: BackfaceVisibility;
  MozBackgroundClip: BackgroundClip;
  MozBackgroundInlinePolicy: BoxDecorationBreak;
  MozBackgroundOrigin: BackgroundOrigin;
  MozBackgroundSize: BackgroundSize<string | number>;
  MozBorderRadius: BorderRadius<string | number>;
  MozBorderRadiusBottomleft: BorderBottomLeftRadius<string | number>;
  MozBorderRadiusBottomright: BorderBottomRightRadius<string | number>;
  MozBorderRadiusTopleft: BorderTopLeftRadius<string | number>;
  MozBorderRadiusTopright: BorderTopRightRadius<string | number>;
  MozBoxAlign: BoxAlign;
  MozBoxDirection: BoxDirection;
  MozBoxFlex: BoxFlex;
  MozBoxOrdinalGroup: BoxOrdinalGroup;
  MozBoxOrient: BoxOrient;
  MozBoxPack: BoxPack;
  MozBoxShadow: BoxShadow;
  MozFloatEdge: MozFloatEdge;
  MozForceBrokenImageIcon: MozForceBrokenImageIcon;
  MozOpacity: Opacity;
  MozOutline: Outline<string | number>;
  MozOutlineColor: OutlineColor;
  MozOutlineStyle: OutlineStyle;
  MozOutlineWidth: OutlineWidth<string | number>;
  MozPerspective: Perspective<string | number>;
  MozPerspectiveOrigin: PerspectiveOrigin<string | number>;
  MozTextAlignLast: TextAlignLast;
  MozTextDecorationColor: TextDecorationColor;
  MozTextDecorationLine: TextDecorationLine;
  MozTextDecorationStyle: TextDecorationStyle;
  MozTransform: Transform;
  MozTransformOrigin: TransformOrigin<string | number>;
  MozTransformStyle: TransformStyle;
  MozTransition: Transition<string & {}>;
  MozTransitionDelay: TransitionDelay<string & {}>;
  MozTransitionDuration: TransitionDuration<string & {}>;
  MozTransitionProperty: TransitionProperty;
  MozTransitionTimingFunction: TransitionTimingFunction;
  MozUserInput: MozUserInput;
  msImeMode: ImeMode;
  OAnimation: Animation<string & {}>;
  OAnimationDelay: AnimationDelay<string & {}>;
  OAnimationDirection: AnimationDirection;
  OAnimationDuration: AnimationDuration<string & {}>;
  OAnimationFillMode: AnimationFillMode;
  OAnimationIterationCount: AnimationIterationCount;
  OAnimationName: AnimationName;
  OAnimationPlayState: AnimationPlayState;
  OAnimationTimingFunction: AnimationTimingFunction;
  OBackgroundSize: BackgroundSize<string | number>;
  OBorderImage: BorderImage;
  OObjectFit: ObjectFit;
  OObjectPosition: ObjectPosition<string | number>;
  OTabSize: TabSize<string | number>;
  OTextOverflow: TextOverflow;
  OTransform: Transform;
  OTransformOrigin: TransformOrigin<string | number>;
  OTransition: Transition<string & {}>;
  OTransitionDelay: TransitionDelay<string & {}>;
  OTransitionDuration: TransitionDuration<string & {}>;
  OTransitionProperty: TransitionProperty;
  OTransitionTimingFunction: TransitionTimingFunction;
  WebkitBoxAlign: BoxAlign;
  WebkitBoxDirection: BoxDirection;
  WebkitBoxFlex: BoxFlex;
  WebkitBoxFlexGroup: BoxFlexGroup;
  WebkitBoxLines: BoxLines;
  WebkitBoxOrdinalGroup: BoxOrdinalGroup;
  WebkitBoxOrient: BoxOrient;
  WebkitBoxPack: BoxPack;
  alignmentBaseline: AlignmentBaseline;
  baselineShift: BaselineShift<string | number>;
  clipRule: ClipRule;
  colorInterpolation: ColorInterpolation;
  colorRendering: ColorRendering;
  dominantBaseline: DominantBaseline;
  fill: Fill;
  fillOpacity: FillOpacity;
  fillRule: FillRule;
  floodColor: FloodColor;
  floodOpacity: FloodOpacity;
  glyphOrientationVertical: GlyphOrientationVertical;
  lightingColor: LightingColor;
  marker: Marker;
  markerEnd: MarkerEnd;
  markerMid: MarkerMid;
  markerStart: MarkerStart;
  shapeRendering: ShapeRendering;
  stopColor: StopColor;
  stopOpacity: StopOpacity;
  stroke: Stroke;
  strokeDasharray: StrokeDasharray<string | number>;
  strokeDashoffset: StrokeDashoffset<string | number>;
  strokeLinecap: StrokeLinecap;
  strokeLinejoin: StrokeLinejoin;
  strokeMiterlimit: StrokeMiterlimit;
  strokeOpacity: StrokeOpacity;
  strokeWidth: StrokeWidth<string | number>;
  textAnchor: TextAnchor;
  vectorEffect: VectorEffect;
}